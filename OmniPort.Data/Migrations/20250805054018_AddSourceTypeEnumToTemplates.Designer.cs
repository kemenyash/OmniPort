// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OmniPort.Data;

#nullable disable

namespace OmniPort.Data.Migrations
{
    [DbContext(typeof(OmniPortDataContext))]
    [Migration("20250805054018_AddSourceTypeEnumToTemplates")]
    partial class AddSourceTypeEnumToTemplates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("OmniPort.Data.TemplateData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("SourceType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("source_type");

                    b.HasKey("Id");

                    b.ToTable("templates");
                });

            modelBuilder.Entity("OmniPort.Data.TemplateFieldData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("TemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("template_id");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("template_fields");
                });

            modelBuilder.Entity("OmniPort.Data.TemplateMappingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("SourceTemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("source_template_id");

                    b.Property<int>("TargetTemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("target_template_id");

                    b.HasKey("Id");

                    b.HasIndex("SourceTemplateId");

                    b.HasIndex("TargetTemplateId");

                    b.ToTable("template_mappings");
                });

            modelBuilder.Entity("OmniPort.Data.TemplateMappingFieldData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("MappingId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mapping_id");

                    b.Property<int?>("SourceFieldId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("source_field_id");

                    b.Property<int>("TargetFieldId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("target_field_id");

                    b.HasKey("Id");

                    b.HasIndex("MappingId");

                    b.HasIndex("SourceFieldId");

                    b.HasIndex("TargetFieldId");

                    b.ToTable("template_mapping_fields");
                });

            modelBuilder.Entity("OmniPort.Data.TemplateFieldData", b =>
                {
                    b.HasOne("OmniPort.Data.TemplateData", "Template")
                        .WithMany("Fields")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("OmniPort.Data.TemplateMappingData", b =>
                {
                    b.HasOne("OmniPort.Data.TemplateData", "SourceTemplate")
                        .WithMany("SourceMappings")
                        .HasForeignKey("SourceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniPort.Data.TemplateData", "TargetTemplate")
                        .WithMany("TargetMappings")
                        .HasForeignKey("TargetTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceTemplate");

                    b.Navigation("TargetTemplate");
                });

            modelBuilder.Entity("OmniPort.Data.TemplateMappingFieldData", b =>
                {
                    b.HasOne("OmniPort.Data.TemplateMappingData", "Mapping")
                        .WithMany()
                        .HasForeignKey("MappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniPort.Data.TemplateFieldData", "SourceField")
                        .WithMany()
                        .HasForeignKey("SourceFieldId");

                    b.HasOne("OmniPort.Data.TemplateFieldData", "TargetField")
                        .WithMany()
                        .HasForeignKey("TargetFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mapping");

                    b.Navigation("SourceField");

                    b.Navigation("TargetField");
                });

            modelBuilder.Entity("OmniPort.Data.TemplateData", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("SourceMappings");

                    b.Navigation("TargetMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
