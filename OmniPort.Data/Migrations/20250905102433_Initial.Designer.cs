// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OmniPort.Data;

#nullable disable

namespace OmniPort.Data.Migrations
{
    [DbContext(typeof(OmniPortDataContext))]
    [Migration("20250905102433_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("OmniPort.Data.BasicTemplateData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("SourceType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("source_type");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("basic_templates");
                });

            modelBuilder.Entity("OmniPort.Data.FieldData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("TemplateSourceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("basic_template_id");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("field_type");

                    b.HasKey("Id");

                    b.HasIndex("TemplateSourceId", "Name")
                        .IsUnique();

                    b.ToTable("fields");
                });

            modelBuilder.Entity("OmniPort.Data.FileConversionHistoryData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("ConvertedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("converted_at");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("file_name");

                    b.Property<int>("MappingTemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mapping_template_id");

                    b.Property<string>("OutputUrl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("output_url");

                    b.HasKey("Id");

                    b.HasIndex("MappingTemplateId");

                    b.ToTable("file_conversion_history");
                });

            modelBuilder.Entity("OmniPort.Data.MappingFieldData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("MappingTemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mapping_template_id");

                    b.Property<int>("SourceFieldId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("source_field_id");

                    b.Property<int>("TargetFieldId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("target_field_id");

                    b.HasKey("Id");

                    b.HasIndex("SourceFieldId");

                    b.HasIndex("TargetFieldId");

                    b.HasIndex("MappingTemplateId", "SourceFieldId", "TargetFieldId")
                        .IsUnique();

                    b.ToTable("mapping_fields");
                });

            modelBuilder.Entity("OmniPort.Data.MappingTemplateData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("SourceTemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("source_template_id");

                    b.Property<int>("TargetTemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("target_template_id");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("SourceTemplateId");

                    b.HasIndex("TargetTemplateId");

                    b.ToTable("template_mapping");
                });

            modelBuilder.Entity("OmniPort.Data.UrlConversionHistoryData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("ConvertedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("converted_at");

                    b.Property<string>("InputUrl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("input_url");

                    b.Property<int>("MappingTemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mapping_template_id");

                    b.Property<string>("OutputUrl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("output_url");

                    b.HasKey("Id");

                    b.HasIndex("MappingTemplateId");

                    b.ToTable("url_conversion_history");
                });

            modelBuilder.Entity("OmniPort.Data.UrlFileGettingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("CheckIntervalMinutes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("check_interval_min");

                    b.Property<int>("MappingTemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mapping_template_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("MappingTemplateId");

                    b.HasIndex("Url", "MappingTemplateId")
                        .IsUnique();

                    b.ToTable("url_file_getting");
                });

            modelBuilder.Entity("OmniPort.Data.FieldData", b =>
                {
                    b.HasOne("OmniPort.Data.BasicTemplateData", "TemplateSource")
                        .WithMany("Fields")
                        .HasForeignKey("TemplateSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemplateSource");
                });

            modelBuilder.Entity("OmniPort.Data.FileConversionHistoryData", b =>
                {
                    b.HasOne("OmniPort.Data.MappingTemplateData", "MappingTemplate")
                        .WithMany("FileConversions")
                        .HasForeignKey("MappingTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MappingTemplate");
                });

            modelBuilder.Entity("OmniPort.Data.MappingFieldData", b =>
                {
                    b.HasOne("OmniPort.Data.MappingTemplateData", "MappingTemplate")
                        .WithMany("MappingFields")
                        .HasForeignKey("MappingTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniPort.Data.FieldData", "SourceField")
                        .WithMany()
                        .HasForeignKey("SourceFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OmniPort.Data.FieldData", "TargetField")
                        .WithMany()
                        .HasForeignKey("TargetFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MappingTemplate");

                    b.Navigation("SourceField");

                    b.Navigation("TargetField");
                });

            modelBuilder.Entity("OmniPort.Data.MappingTemplateData", b =>
                {
                    b.HasOne("OmniPort.Data.BasicTemplateData", "SourceTemplate")
                        .WithMany("AsSourceMappings")
                        .HasForeignKey("SourceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniPort.Data.BasicTemplateData", "TargetTemplate")
                        .WithMany("AsTargetMappings")
                        .HasForeignKey("TargetTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceTemplate");

                    b.Navigation("TargetTemplate");
                });

            modelBuilder.Entity("OmniPort.Data.UrlConversionHistoryData", b =>
                {
                    b.HasOne("OmniPort.Data.MappingTemplateData", "MappingTemplate")
                        .WithMany("UrlConversions")
                        .HasForeignKey("MappingTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MappingTemplate");
                });

            modelBuilder.Entity("OmniPort.Data.UrlFileGettingData", b =>
                {
                    b.HasOne("OmniPort.Data.MappingTemplateData", "MappingTemplate")
                        .WithMany()
                        .HasForeignKey("MappingTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MappingTemplate");
                });

            modelBuilder.Entity("OmniPort.Data.BasicTemplateData", b =>
                {
                    b.Navigation("AsSourceMappings");

                    b.Navigation("AsTargetMappings");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("OmniPort.Data.MappingTemplateData", b =>
                {
                    b.Navigation("FileConversions");

                    b.Navigation("MappingFields");

                    b.Navigation("UrlConversions");
                });
#pragma warning restore 612, 618
        }
    }
}
