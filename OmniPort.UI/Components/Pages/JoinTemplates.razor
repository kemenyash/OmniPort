@page "/join-templates"
@using OmniPort.Core.Interfaces
@using OmniPort.Core.Models
@using OmniPort.UI.Components.Layout
@using OmniPort.UI.Services
@inject ITemplateService TemplateService
@layout MainLayout
@rendermode InteractiveServer

<h1 class="text-2xl font-bold mb-6">Join Templates</h1>

@if (Templates is null)
{
    <p>Loading templates...</p>
}
else
{
    <div class="grid grid-cols-2 gap-6">
        <!-- Source Template -->
        <div class="border rounded p-4 shadow bg-white">
            <div class="flex items-center justify-between mb-2">
                <h2 class="text-xl font-semibold text-blue-700">Source Template:</h2>
                <select class="border rounded px-2 py-1" @onchange="OnSourceTemplateChanged">
                    <option disabled selected value="">Select Template</option>
                    @foreach (var t in Templates)
                    {
                        <option value="@t.Id" selected="@(SourceId == t.Id)">
                            @t.TemplateName
                        </option>
                    }
                </select>
            </div>
            <p class="text-sm text-gray-500 mb-3 italic">Fields from original data</p>
            <ul class="list-disc pl-5 space-y-1">
                @foreach (var field in SourceTemplate?.Columns ?? [])
                {
                    <li>
                        <span class="font-medium">@field</span>
                        <span class="text-gray-500 text-sm">(string)</span>
                    </li>
                }
            </ul>
        </div>

        <!-- Target Template -->
        <div class="border rounded p-4 shadow bg-white">
            <div class="flex items-center justify-between mb-2">
                <h2 class="text-xl font-semibold text-green-700">Internal CRM Schema:</h2>
                <select class="border rounded px-2 py-1" @onchange="OnTargetTemplateChanged">
                    <option disabled selected value="">Select Schema</option>
                    @foreach (var t in Templates)
                    {
                        <option value="@t.Id" selected="@(TargetId == t.Id)">
                            @t.TemplateName
                        </option>
                    }
                </select>
            </div>
            <p class="text-sm text-gray-500 mb-3 italic">Match source fields to target structure</p>
            <div class="space-y-4">
                @foreach (var field in TargetTemplate?.Columns ?? [])
                {
                    <div>
                        <label class="block font-medium text-gray-800">@field</label>
                        <select class="w-full mt-1 px-3 py-2 border rounded bg-gray-50"
                                @onchange="e => MapField(field, e.Value?.ToString())">
                            <option value="">-- Not Mapped --</option>
                            @foreach (var source in SourceTemplate?.Columns ?? [])
                            {
                                <option value="@source" selected="@IsSelected(field, source)">
                                    @source
                                </option>
                            }
                        </select>
                    </div>
                }
            </div>
        </div>
    </div>

    <button @onclick="SaveMapping"
            class="mt-6 bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 disabled:opacity-50"
            disabled="@(!CanSave)">
        Save Mapping
    </button>
}

@code {
    private List<ImportTemplate>? Templates;
    private ImportTemplate? SourceTemplate;
    private ImportTemplate? TargetTemplate;

    private int? SourceId;
    private int? TargetId;

    private readonly Dictionary<string, string> Mappings = new();

    private bool CanSave => SourceId.HasValue && TargetId.HasValue && Mappings.Any();

    protected override async Task OnInitializedAsync()
    {
        Templates = await TemplateService.GetTemplatesAsync();
    }

    private async Task OnSourceTemplateChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var id))
        {
            SourceId = id;
            SourceTemplate = await TemplateService.GetTemplateByIdAsync(id);
            Mappings.Clear();
        }
    }

    private async Task OnTargetTemplateChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var id))
        {
            TargetId = id;
            TargetTemplate = await TemplateService.GetTemplateByIdAsync(id);
            Mappings.Clear();
        }
    }

    private void MapField(string targetField, string? sourceField)
    {
        if (string.IsNullOrWhiteSpace(sourceField))
            Mappings.Remove(targetField);
        else
            Mappings[targetField] = sourceField;
    }

    private bool IsSelected(string target, string source)
    {
        return Mappings.TryGetValue(target, out var mapped) && mapped == source;
    }

    private async Task SaveMapping()
    {
        if (!CanSave || SourceTemplate is null || TargetTemplate is null)
            return;

        var profile = new ImportProfile
        {
            Template = TargetTemplate,
            Mappings = Mappings.Select(kv =>
            {
                var field = TargetTemplate.Fields.FirstOrDefault(f => f.Name == kv.Key);

                return new FieldMapping
                {
                    SourceField = kv.Value,
                    TargetField = kv.Key,
                    TargetType = field?.Type ?? FieldDataType.String,
                    DateFormat = null,
                    CustomTransform = null
                };
            }).ToList()
        };

        await TemplateService.SaveMappingAsync(profile, SourceTemplate.Id);
    }


}
