@page "/transform"
@using OmniPort.Core.Models
@using OmniPort.UI.Presentation.ViewModels
@inject TransformationViewModel ViewModel

<EditForm Model="@ViewModel.FormModel" OnValidSubmit="RunTransformation">
    <div class="space-y-6">

        <!-- Template Selection -->
        <div>
            <label>Template</label>
            <InputSelect @bind-Value="ViewModel.FormModel.SelectedTemplateId" class="w-full border px-3 py-2 rounded">
                <option value="0" disabled>Select template</option>
                @foreach (var t in ViewModel.JoinedTemplates)
                {
                    <option value="@t.Id">@t.ToString()</option>
                }
            </InputSelect>
        </div>

        <!-- Mode Selection -->
        <div class="flex gap-4">
            <label>Import mode:</label>
            <button type="button" @onclick="() => inputMode = UploadMode.Upload" class="@GetButtonClass(UploadMode.Upload)">Upload</button>
            <button type="button" @onclick="() => inputMode = UploadMode.Url" class="@GetButtonClass(UploadMode.Url)">URL</button>
        </div>

        <!-- Upload -->
        @if (inputMode == UploadMode.Upload)
        {
            <div>
                <label>Upload File</label>
                <InputFile OnChange="e => ViewModel.SetUploadedFile(e.File)" class="w-full border px-3 py-2 rounded" />
            </div>
        }

        <!-- URL -->
        @if (inputMode == UploadMode.Url)
        {
            <div>
                <label>File URL</label>
                <InputText @bind-Value="ViewModel.FormModel.FileUrl" class="w-full border px-3 py-2 rounded" />
            </div>

            <div>
                <label>Check Interval (min)</label>
                <InputNumber @bind-Value="ViewModel.FormModel.IntervalMinutes" class="w-32 border px-3 py-2 rounded" />
            </div>
        }

        <!-- Output Format -->
        <div>
            <label>Output Format</label>
            <InputSelect @bind-Value="ViewModel.FormModel.OutputExtension" class="w-full border px-3 py-2 rounded">
                <option value="csv">CSV</option>
                <option value="json">JSON</option>
                <option value="xml">XML</option>
            </InputSelect>
        </div>

        <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded">Run Transformation</button>
    </div>
</EditForm>

<hr class="my-10" />

<!-- Watched URLs -->
@if (inputMode == UploadMode.Url && ViewModel.WatchedUrls.Any())
{
    <h2 class="text-lg font-semibold mb-2">Watched URLs</h2>
    <table class="w-full table-auto border border-gray-300">
        <thead>
            <tr class="bg-gray-100">
                <th class="px-4 py-2 text-left">URL</th>
                <th class="px-4 py-2 text-left">Interval (min)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var w in ViewModel.WatchedUrls)
            {
                <tr>
                    <td class="border px-4 py-2">@w.Url</td>
                    <td class="border px-4 py-2">@w.IntervalMinutes</td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- URL Conversion History -->
@if (inputMode == UploadMode.Url && ViewModel.UrlConversions.Any())
{
    <h2 class="text-lg font-semibold mb-2">URL Conversion History</h2>
    <table class="w-full table-auto border border-gray-300">
        <thead>
            <tr class="bg-gray-100">
                <th class="px-4 py-2 text-left">Input URL</th>
                <th class="px-4 py-2 text-left">Converted At</th>
                <th class="px-4 py-2 text-left">Template</th>
                <th class="px-4 py-2 text-left">Output</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var u in ViewModel.UrlConversions)
            {
                <tr>
                    <td class="border px-4 py-2">@u.InputUrl</td>
                    <td class="border px-4 py-2">@u.ConvertedAt.ToLocalTime()</td>
                    <td class="border px-4 py-2">@u.TemplateName</td>
                    <td class="border px-4 py-2">
                        <a href="@u.OutputLink" target="_blank" class="text-blue-600 underline">View</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- File Conversion History -->
@if (inputMode == UploadMode.Upload && ViewModel.FileConversions.Any())
{
    <h2 class="text-lg font-semibold mb-2">File Conversion History</h2>
    <table class="w-full table-auto border border-gray-300">
        <thead>
            <tr class="bg-gray-100">
                <th class="px-4 py-2 text-left">File Name</th>
                <th class="px-4 py-2 text-left">Converted At</th>
                <th class="px-4 py-2 text-left">Template</th>
                <th class="px-4 py-2 text-left">Output</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var f in ViewModel.FileConversions)
            {
                <tr>
                    <td class="border px-4 py-2">@f.FileName</td>
                    <td class="border px-4 py-2">@f.ConvertedAt.ToLocalTime()</td>
                    <td class="border px-4 py-2">@f.TemplateName</td>
                    <td class="border px-4 py-2">
                        <a href="@f.OutputLink" target="_blank" class="text-blue-600 underline">View</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private UploadMode inputMode = UploadMode.Upload;

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.InitAsync();
    }

    private async Task RunTransformation()
    {
        if (ViewModel.FormModel.SelectedTemplateId == 0)
            return;

        if (inputMode == UploadMode.Upload)
            await ViewModel.RunUploadAsync();
        else
            await ViewModel.RunUrlAsync();
    }

    private string GetButtonClass(UploadMode mode) =>
        inputMode == mode
            ? "bg-blue-600 text-white px-3 py-1 rounded"
            : "bg-gray-200 text-gray-700 px-3 py-1 rounded";

    enum UploadMode { Upload, Url }
}
