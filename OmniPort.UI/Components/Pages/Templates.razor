@page "/templates"
@using OmniPort.Core.Interfaces
@using OmniPort.Core.Models
@inject NavigationManager Navigation
@inject ITemplateService TemplateService

<h1 class="text-2xl font-bold mb-6">Templates</h1>

<!-- Existing Templates Table -->
<table class="min-w-full bg-white shadow rounded mb-6">
    <thead>
        <tr class="bg-gray-100 text-left">
            <th class="p-3">Name</th>
            <th class="p-3">Created</th>
            <th class="p-3">Source Type</th>
            <th class="p-3"></th>
        </tr>
    </thead>
    <tbody>
        @if (ExistingTemplates.Any())
        {
            @foreach (var tpl in ExistingTemplates)
            {
                <tr>
                    <td class="p-3">@tpl.Name</td>
                    <td class="p-3">@tpl.CreatedAt.ToShortDateString()</td>
                    <td class="p-3">@tpl.SourceType</td>
                    <td class="p-3 flex gap-2">
                        <button class="text-blue-600 hover:underline" @onclick="() => EditTemplate(tpl.Id)">Edit</button>
                        <button class="text-red-600 hover:underline" @onclick="() => ConfirmDeleteTemplate(tpl.Id, tpl.Name)">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4" class="p-3 text-gray-500 italic">No templates found.</td>
            </tr>
        }
    </tbody>
</table>

<!-- Buttons -->
<div class="flex gap-4 mb-8">
    <button class="bg-blue-600 text-white px-4 py-2 rounded" @onclick="ShowCreateTemplateModal">Create Template</button>
    <button class="bg-gray-200 px-4 py-2 rounded" @onclick="@(() => Navigation.NavigateTo("/join-templates"))">Join Templates</button>
</div>

<!-- Modal -->
@if (ShowModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl" @onclick:stopPropagation>
            <h2 class="text-xl font-semibold mb-4">@((EditingTemplateId == null) ? "Create Template" : $"Edit Template")</h2>

            <EditForm Model="@NewTemplate" OnValidSubmit="SaveTemplateAsync">
                <div class="mb-4">
                    <label class="block font-medium mb-1">Template Name</label>
                    <InputText class="w-full border rounded px-3 py-2" @bind-Value="NewTemplate.TemplateName" />
                </div>

                <div class="mb-4">
                    <label class="block font-medium mb-1">Source Type</label>
                    <InputSelect class="w-full border rounded px-3 py-2" @bind-Value="SelectedSourceType">
                        @foreach (SourceType type in Enum.GetValues(typeof(SourceType)))
                        {
                            <option value="@type">@type</option>
                        }
                    </InputSelect>
                </div>

                @foreach (var field in NewFields)
                {
                    <div class="grid grid-cols-4 gap-2 items-center mb-2">
                        <InputText class="border rounded px-2 py-1 col-span-2" @bind-Value="field.SourceField" placeholder="Field name" />
                        <InputSelect class="border rounded px-2 py-1" @bind-Value="field.TargetType">
                            @foreach (FieldDataType type in Enum.GetValues(typeof(FieldDataType)))
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                        <div class="flex items-center gap-2">
                            <button type="button" class="text-red-500 hover:underline" @onclick="@(() => RemoveField(field))">Remove</button>
                        </div>
                    </div>
                }

                <button type="button" class="text-blue-600 hover:underline mb-4" @onclick="AddField">+ Add Field</button>

                <div class="flex justify-end gap-3 mt-4">
                    <button type="button" class="px-4 py-2 bg-gray-300 rounded" @onclick="CloseModal">Cancel</button>
                    <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded">Save Template</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (ShowDeleteConfirm)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
            <h2 class="text-xl font-semibold mb-4">Confirm Delete</h2>
            <p>Are you sure you want to delete template <strong>@TemplateToDeleteName</strong>?</p>
            <div class="flex justify-end gap-3 mt-4">
                <button class="px-4 py-2 bg-gray-300 rounded" @onclick="() => ShowDeleteConfirm = false">Cancel</button>
                <button class="px-4 py-2 bg-red-600 text-white rounded" @onclick="DeleteTemplateAsync">Delete</button>
            </div>
        </div>
    </div>
}

@code {
    private bool ShowModal = false;
    private ImportTemplate NewTemplate = new();
    private List<FieldMapping> NewFields = new();
    private List<TemplateSummary> ExistingTemplates = new();
    private int? EditingTemplateId = null;
    private int? TemplateToDeleteId = null;
    private string? TemplateToDeleteName;
    private bool ShowDeleteConfirm = false;
    private SourceType SelectedSourceType = SourceType.Unknown;

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplatesAsync();
    }

    private async Task LoadTemplatesAsync()
    {
        ExistingTemplates = await TemplateService.GetTemplatesSummaryAsync();
    }

    private void ShowCreateTemplateModal()
    {
        NewTemplate = new ImportTemplate();
        NewFields = new List<FieldMapping>
        {
            new FieldMapping { SourceField = "", TargetType = FieldDataType.String }
        };
        SelectedSourceType = SourceType.CSV;
        EditingTemplateId = null;
        ShowModal = true;
    }

    private void CloseModal()
    {
        ShowModal = false;
        EditingTemplateId = null;
    }

    private void AddField()
    {
        NewFields.Add(new FieldMapping { SourceField = "", TargetType = FieldDataType.String });
    }

    private void RemoveField(FieldMapping field)
    {
        NewFields.Remove(field);
    }

    private async Task EditTemplate(int templateId)
    {
        var template = await TemplateService.GetTemplateAsync(templateId);
        var mappings = await TemplateService.GetMappingsByTemplateIdAsync(templateId);

        if (template == null || mappings == null)
            return;

        EditingTemplateId = templateId;
        NewTemplate = template;
        NewFields = mappings.ToList();
        SelectedSourceType = template.SourceType;
        ShowModal = true;
    }

    private async Task DeleteTemplateAsync()
    {
        if (TemplateToDeleteId.HasValue)
        {
            var deleted = await TemplateService.DeleteTemplateByIdAsync(TemplateToDeleteId.Value);
            if (deleted)
            {
                await LoadTemplatesAsync();
            }
        }

        TemplateToDeleteId = null;
        TemplateToDeleteName = null;
        ShowDeleteConfirm = false;
    }

    private void ConfirmDeleteTemplate(int id, string name)
    {
        TemplateToDeleteId = id;
        TemplateToDeleteName = name;
        ShowDeleteConfirm = true;
    }

    private async Task SaveTemplateAsync()
    {
        if (string.IsNullOrWhiteSpace(NewTemplate.TemplateName) || !NewFields.Any())
            return;

        NewTemplate.Fields = NewFields.Select(f => new TemplateField
        {
            Name = f.SourceField,
            Type = f.TargetType
        }).ToList();

        NewTemplate.SourceType = SelectedSourceType;

        if (EditingTemplateId.HasValue)
        {
            await TemplateService.UpdateTemplateByIdAsync(EditingTemplateId.Value, NewTemplate, NewFields);
        }
        else
        {
            await TemplateService.CreateTemplateAsync(NewTemplate, SelectedSourceType, NewFields);
        }

        await LoadTemplatesAsync();
        CloseModal();
    }
}
