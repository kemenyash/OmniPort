@page "/templates"
@using OmniPort.Core.Models
@inject NavigationManager Navigation

<h1 class="text-2xl font-bold mb-6">Templates</h1>

<!-- Existing Templates Table -->
<table class="min-w-full bg-white shadow rounded mb-6">
    <thead>
        <tr class="bg-gray-100 text-left">
            <th class="p-3">Name</th>
            <th class="p-3">Created</th>
            <th class="p-3">Source Type</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td class="p-3">Example Template</td>
            <td class="p-3">@DateTime.Today.ToShortDateString()</td>
            <td class="p-3">CSV</td>
        </tr>
    </tbody>
</table>

<!-- Buttons -->
<div class="flex gap-4 mb-8">
    <button class="bg-blue-600 text-white px-4 py-2 rounded" @onclick="ShowCreateTemplateModal">Create Template</button>
    <button class="bg-gray-200 px-4 py-2 rounded">Upload File to Generate</button>
</div>

<!-- Modal -->
@if (ShowModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl" @onclick:stopPropagation>
            <h2 class="text-xl font-semibold mb-4">Create Template</h2>

            <EditForm Model="@NewTemplate" OnValidSubmit="SaveTemplate">
                <div class="mb-4">
                    <label class="block font-medium mb-1">Template Name</label>
                    <InputText class="w-full border rounded px-3 py-2" @bind-Value="NewTemplate.TemplateName" />
                </div>

                @foreach (var field in NewFields)
                {
                    <div class="grid grid-cols-4 gap-2 items-center mb-2">
                        <InputText class="border rounded px-2 py-1 col-span-2" @bind-Value="field.SourceField" placeholder="Field name" />
                        <InputSelect class="border rounded px-2 py-1" @bind-Value="field.TargetType">
                            <option value="">Select type</option>
                            @foreach (FieldType type in Enum.GetValues(typeof(FieldType)))
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                        <div class="flex items-center gap-2">
                            <button type="button" class="text-red-500 hover:underline" @onclick="@(() => RemoveField(field))">Remove</button>
                        </div>
                    </div>
                }

                <button type="button" class="text-blue-600 hover:underline mb-4" @onclick="AddField">+ Add Field</button>

                <div class="flex justify-end gap-3 mt-4">
                    <button type="button" class="px-4 py-2 bg-gray-300 rounded" @onclick="CloseModal">Cancel</button>
                    <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded">Save Template</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private bool ShowModal = false;

    private ImportTemplate NewTemplate = new();
    private List<FieldMapping> NewFields = new();

    private void ShowCreateTemplateModal()
    {
        NewTemplate = new ImportTemplate();
        NewFields = new List<FieldMapping>
        {
            new FieldMapping { SourceField = "", TargetType = FieldType.String }
        };
        ShowModal = true;
    }

    private void CloseModal()
    {
        ShowModal = false;
    }

    private void AddField()
    {
        NewFields.Add(new FieldMapping { SourceField = "", TargetType = FieldType.String });
    }

    private void RemoveField(FieldMapping field)
    {
        NewFields.Remove(field);
    }

    private void SaveTemplate()
    {
        NewTemplate.Columns = NewFields.Select(f => f.SourceField).ToList();

        // TODO: Save to DB or state store
        Console.WriteLine($"Saved template: {NewTemplate.TemplateName}");

        ShowModal = false;
    }
}
